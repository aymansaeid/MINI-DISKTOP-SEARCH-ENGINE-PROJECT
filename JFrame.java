package NEW;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.FileNameMap;
import java.util.ArrayList;
import javax.swing.JFileChooser;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author 2A04
 */
public class JFrame<T extends Comparable<T>> extends javax.swing.JFrame {

    ArrayList<String> ignore = new ArrayList<>();
    AymanSaeidNode4BST<T> root;

    /**
     * Creates new form NewJFrame
     */
    public JFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        inOrderBottun = new javax.swing.JButton();
        preOrderBottun = new javax.swing.JButton();
        postOrderBottun = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        ChooseFiles = new javax.swing.JButton();
        IgonreFile = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        searchh = new javax.swing.JTextField();
        SearchForWord = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        found = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DESKTOP SEARCH ENGINE");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setLayout(null);

        inOrderBottun.setText("IN-ORDER");
        inOrderBottun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inOrderBottunActionPerformed(evt);
            }
        });
        jPanel1.add(inOrderBottun);
        inOrderBottun.setBounds(980, 500, 270, 110);

        preOrderBottun.setText("PRE-ORDER");
        preOrderBottun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preOrderBottunActionPerformed(evt);
            }
        });
        jPanel1.add(preOrderBottun);
        preOrderBottun.setBounds(980, 350, 270, 110);

        postOrderBottun.setText("POST-ORDER");
        postOrderBottun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postOrderBottunActionPerformed(evt);
            }
        });
        jPanel1.add(postOrderBottun);
        postOrderBottun.setBounds(980, 660, 270, 110);

        text.setEditable(false);
        text.setColumns(20);
        text.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        text.setRows(5);
        jScrollPane1.setViewportView(text);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(1280, 60, 620, 730);

        ChooseFiles.setText("CHOOSE THE FILES");
        ChooseFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseFilesActionPerformed(evt);
            }
        });
        jPanel1.add(ChooseFiles);
        ChooseFiles.setBounds(980, 70, 270, 110);

        IgonreFile.setText("CHOOSE THE IGNORE LIST");
        IgonreFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IgonreFileActionPerformed(evt);
            }
        });
        jPanel1.add(IgonreFile);
        IgonreFile.setBounds(980, 210, 270, 110);

        output.setEditable(false);
        output.setColumns(20);
        output.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        output.setRows(5);
        jScrollPane2.setViewportView(output);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(30, 60, 920, 720);

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("IGNORE LIST :");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(1450, 10, 220, 60);

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Traversal :");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(390, 10, 220, 60);

        searchh.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jPanel1.add(searchh);
        searchh.setBounds(40, 910, 450, 70);

        SearchForWord.setBackground(new java.awt.Color(255, 0, 0));
        SearchForWord.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        SearchForWord.setText("SEARCH");
        SearchForWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchForWordActionPerformed(evt);
            }
        });
        jPanel1.add(SearchForWord);
        SearchForWord.setBounds(530, 910, 170, 70);

        found.setColumns(20);
        found.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        found.setRows(5);
        jScrollPane3.setViewportView(found);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(740, 820, 1160, 240);

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1920, 1080));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ChooseFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseFilesActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.showOpenDialog(null);
        File[] files = fileChooser.getSelectedFiles();// save the files in array
        for (File file : files) {
            if (file != null) {
                try {
                    String fileName = file.getName();
                    // open the file for reading
                    BufferedReader reader = new BufferedReader(new FileReader(file));

                    // read each line from the file
                    String line;
                    while ((line = reader.readLine()) != null) {
                        // split the line into words using whitespace as delimiter
                        String[] words = line.split("\\s+");

                        // add each word to the ArrayList
                        for (String word : words) {
                            // insert the word and file name into the binray search tree
                            insert((T) word, fileName);
                        }
                    }
                    reader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_ChooseFilesActionPerformed

    private void IgonreFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IgonreFileActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(null);
        File file = fileChooser.getSelectedFile();
        if (file != null) {
            try {
                // open the file for reading
                BufferedReader reader = new BufferedReader(new FileReader(file));

                // read each line from the file
                String line;
                while ((line = reader.readLine()) != null) {
                    // split the line into words using whitespace as delimiter
                    String[] words = line.split("\\s+");

                    // add each word to the array list
                    for (String word : words) {
                        // add the word into the ignore list
                        ignore.add(word);
                    }
                }
                reader.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            //  printing the words in the ArrayList
            for (String word : ignore) {
                text.append(word + "\n");
            }
        }
    }//GEN-LAST:event_IgonreFileActionPerformed

    private void postOrderBottunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postOrderBottunActionPerformed
        output.append("postfix : \n \n");
        postfix(root);
        output.append("\n");
    }//GEN-LAST:event_postOrderBottunActionPerformed

    private void inOrderBottunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inOrderBottunActionPerformed
        output.append("inorder : \n \n");
        inorder(root);
        output.append("\n");
    }//GEN-LAST:event_inOrderBottunActionPerformed

    private void preOrderBottunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preOrderBottunActionPerformed
        output.append("preorder : \n \n");
        preorder(root);
        output.append("\n");
    }//GEN-LAST:event_preOrderBottunActionPerformed

    private void SearchForWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchForWordActionPerformed

        String searchText = searchh.getText();
        AymanSaeidNode4BST<T> current = root;
        while (current != null) {
            int cmp = searchText.compareTo((String) current.data);
            if (cmp < 0) {
                current = current.left;
            } else if (cmp > 0) {
                current = current.right;
            } else {
                found.append(searchText + " : Found  " + current.frequency + " times | found in : "); // key found, return the key
                AymanSaeidNode4Linklist<T> temp = (AymanSaeidNode4Linklist<T>) current.linkedList.head; //retrieves the head node of a linked list and assigns it to the variable temp, casting it to the appropriate type.
                while (temp != null) {
                    found.append(temp.data + " -> " + temp.frequency + " | ");
                    temp = temp.next;
                }
                found.append("\n");
                return;
            }
        }
        found.setText(searchText + " not found");


    }//GEN-LAST:event_SearchForWordActionPerformed

    /**
     * @param args the command line arguments
     */
    void inorder(AymanSaeidNode4BST<T> AymanSaeidNode4BST) {   // [ L , N , R ]
        if (AymanSaeidNode4BST != null) {
            inorder(AymanSaeidNode4BST.left);
            output.append(AymanSaeidNode4BST.data + " , " + AymanSaeidNode4BST.frequency + "\n");
            inorder(AymanSaeidNode4BST.right);
        }
    }

    void preorder(AymanSaeidNode4BST<T> AymanSaeidNode4BST) {  // [ N , L , R ]
        if (AymanSaeidNode4BST != null) {
            output.append(AymanSaeidNode4BST.data + " , " + AymanSaeidNode4BST.frequency + "\n");
            preorder(AymanSaeidNode4BST.left);
            preorder(AymanSaeidNode4BST.right);
        }
    }

    void postfix(AymanSaeidNode4BST<T> AymanSaeidNode4BST) {  // [ R , L , N ]
        if (AymanSaeidNode4BST != null) {
            postfix(AymanSaeidNode4BST.right);
            postfix(AymanSaeidNode4BST.left);
            output.append(AymanSaeidNode4BST.data + " , " + AymanSaeidNode4BST.frequency + "\n");
        }
    }

    void insert(T data, String fileName) {
        if (ignore.contains(data)) {
            return;
        }
        AymanSaeidNode4BST<T> newnode = new AymanSaeidNode4BST<>(data);
        if (!newnode.linkedList.contains(fileName)) {
            newnode.linkedList.add_first(fileName);
        }
        if (root == null) { // If the root of the tree is null, meaning the tree is empty, it sets the root to be the new node.
            root = newnode;
        } else {
            AymanSaeidNode4BST<T> temp = root;
            while (temp != null) {// If newData is less than the data in the current node, move to the left child. newnode.data - temp.data < 0             
                if (newnode.data.compareTo(temp.data) < 0) {
                    if (temp.left == null) {
                        temp.left = newnode;
                        return;
                    }
                    temp = temp.left;
                } else if (newnode.data.compareTo(temp.data) > 0) { // If newData is greater than the data in the current node, move to the right child. newnode.data - temp.data > 0
                    if (temp.right == null) {
                        temp.right = newnode;
                        return;
                    }
                    temp = temp.right;
                } else if (newnode.data.compareTo(temp.data) == 0) { // newnode.data - temp.data = 0 thats mean they are equal .
                    // System.out.println("data alreaddy exists" + "  " + data);
                    temp.frequency++;
                    temp.linkedList.add_first(fileName); // Add filename to the linked list

                    return;
                }
            }
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ChooseFiles;
    private javax.swing.JButton IgonreFile;
    private javax.swing.JButton SearchForWord;
    private javax.swing.JTextArea found;
    private javax.swing.JButton inOrderBottun;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea output;
    private javax.swing.JButton postOrderBottun;
    private javax.swing.JButton preOrderBottun;
    private javax.swing.JTextField searchh;
    private javax.swing.JTextArea text;
    // End of variables declaration//GEN-END:variables
}
